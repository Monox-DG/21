#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

#define MAX_NUMBERS 30

bool read_numbers(int *arr, int *size) {
    *size = 0;
    while (*size < MAX_NUMBERS) {
        if (scanf("%d", &arr[*size]) != 1) {
            return false;
        }
        (*size)++;
        if (getchar() == '\n') break;
    }
    return true;
}

double calculate_mean(int *arr, int size) {
    double sum = 0;
    for (int i = 0; i < size; i++) {
        sum += arr[i];
    }
    return sum / size;
}

double calculate_variance(int *arr, int size, double mean) {
    double sum = 0;
    for (int i = 0; i < size; i++) {
        sum += (arr[i] - mean) * (arr[i] - mean);
    }
    return sum / size;
}

int search_value(int *arr, int size, double mean, double variance, int expected_value) {
    double stddev = sqrt(variance);
    for (int i = 0; i < size; i++) {
        int num = arr[i];
        if (num != 0 && num % 2 == 0 && num >= expected_value && num <= mean + 3 * stddev) {
            return num;
        }
    }
    return 0;
}

int main() {
    int numbers[MAX_NUMBERS];
    int size;
    int expected_value;

    if (scanf("%d", &expected_value) != 1) {
        printf("n/a\n");
        return 1;
    }

    if (!read_numbers(numbers, &size)) {
        printf("n/a\n");
        return 1;
    }

    if (size == 0) {
        printf("0\n");
        return 0;
    }

    double mean = calculate_mean(numbers, size);
    double variance = calculate_variance(numbers, size, mean);

    int result = search_value(numbers, size, mean, variance, expected_value);

    printf("%d", result);
    return 0;
}
